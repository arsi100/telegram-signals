steps:
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - functions
    - deploy
    - run_signal_generation  # Your function name
    - --source=./functions  # Directory containing your function code relative to root
    - --entry-point=run_signal_generation # Python function to execute
    - --runtime=python312  # Supported Python runtime
    - --trigger-http       # Trigger via HTTP (for Cloud Scheduler)
    - --region=us-central1 # Deployment region (adjust if needed)
    - --no-allow-unauthenticated # Explicitly disallow public access
    - --set-secrets=GEMINI_API_KEY=GEMINI_API_KEY:latest,TELEGRAM_BOT_TOKEN=TELEGRAM_BOT_TOKEN:latest,TELEGRAM_CHAT_ID=TELEGRAM_CHAT_ID:latest,CRYPTOCOMPARE_API_KEY=CRYPTOCOMPARE_API_KEY:latest
    - --build-service-account=service-777440185914@gcp-sa-cloudbuild.iam.gserviceaccount.com # Explicitly set build service account

# availableSecrets:
#   secretManager:
#   - versionName: projects/$PROJECT_ID/secrets/GEMINI_API_KEY/versions/latest
#     env: 'GEMINI_API_KEY' # Not strictly needed by function, but good for build context if required
#   - versionName: projects/$PROJECT_ID/secrets/TELEGRAM_BOT_TOKEN/versions/latest
#     env: 'TELEGRAM_BOT_TOKEN'
#   - versionName: projects/$PROJECT_ID/secrets/TELEGRAM_CHAT_ID/versions/latest
#     env: 'TELEGRAM_CHAT_ID'
#   - versionName: projects/$PROJECT_ID/secrets/CRYPTOCOMPARE_API_KEY/versions/latest
#     env: 'CRYPTOCOMPARE_API_KEY'

options:
  logging: CLOUD_LOGGING_ONLY # Or NONE, GCS_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET

# Optional: Specify the service account Cloud Build uses (uses default if omitted)
# serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/your-cloud-build-service-account@...'